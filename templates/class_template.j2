{#            #}
{# Auto-generated by generate_models.py      #}
{#            #}

from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey, Boolean, Float, text
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

{#                - #}
{% macro fix_type(sql_type) -%}
  {%- set t = sql_type.upper() -%}
  {%- if t.startswith('INTEGER') -%} Integer
  {%- elif t.startswith('TEXT') -%} Text
  {%- elif 'VARCHAR' in t -%} String({{ t.split('VARCHAR(')[1].rstrip(')') }})
  {%- elif t.startswith('TIMESTAMP') or t.startswith('TIMESTAMPTZ') -%} DateTime
  {%- elif t.startswith('DATE') -%} DateTime
  {%- elif t.startswith('BOOLEAN') -%} Boolean
  {%- elif t.startswith('NUMERIC') or t.startswith('DECIMAL') -%} Float
  {%- else -%} String   {# Fallback tipi #}
  {%- endif -%}
{%- endmacro %}

{#                - #}
{% for tbl in tables %}
#           
class {{ tbl.name.replace('_',' ').title().replace(' ','') }}(Base):
    __tablename__ = "{{ tbl.name }}"
{% if tbl.comment %}
    # Comment: {{ tbl.comment }}
{% endif %}

    {# Her sütun için Column(...) üretelim #}
    {% for col in tbl.columns %}
        {%- set is_fk = false -%}
        {%- set fk_target = None -%}

        {# 1) Eğer database’de inspector.get_foreign_keys() listesinde bu sütun varsa, onu kullan #}
        {%- for fk in tbl.foreign_keys %}
            {%- if fk.name == col.name %}
                {%- set is_fk = true -%}
                {%- set fk_target = fk.target_table ~ "." ~ fk.target_column -%}
            {%- endif %}
        {%- endfor %}

        {# 2) Eğer yukarıda bulunamadıysa “_<tabloadı>_id” şekliyle otomatik eşleme dene #}
        {%- if not is_fk and col.name.endswith('_id') and not col.primary_key %}
            {%- set ref_table = col.name[:-3] -%}
            {%- set is_fk = true -%}
            {%- set fk_target = ref_table ~ ".id" -%}
        {%- endif %}

        {%- if is_fk %}
    {{ col.name }} = Column(
        {{ fix_type(col.type) }}, ForeignKey("{{ fk_target }}")
        {%- if col.primary_key %}, primary_key=True{% endif %}
        {%- if col.nullable is not none and not col.nullable %}, nullable=False{% endif %}
        {%- if col.default is not none %}, server_default=text({{ col.default }}){% endif %}
    )
        {%- else %}
    {{ col.name }} = Column(
        {{ fix_type(col.type) }}
        {%- if col.primary_key %}, primary_key=True{% endif %}
        {%- if col.nullable is not none and not col.nullable %}, nullable=False{% endif %}
        {%- if col.default is not none %}, server_default=text({{ col.default }}){% endif %}
    )
        {%- endif %}

    {% endfor %}
{% endfor %}


{#                - #}
{# VIEWS (read‐only olarak autoload yapılacak) #}
{#                - #}
{# VIEWS (sqlalchemy-declarative-extensions ile yönetilecek) #}
{% if views %}
# ========================================
# Görünüm Tanımları (SQLAlchemy Declarative Extensions ile)
from sqlalchemy_declarative_extensions import declared_view, view_ddl
from sqlalchemy.sql import select, text # select ve text'i de import ediyoruz

{% for vw in views %}
# View: {{ vw.name }}
@declared_view
class {{ vw.name.replace('_',' ').title().replace(' ','') }}(Base):
    __tablename__ = "{{ vw.name }}"
    # __view__ özelliği artık doğrudan SQL string'i veya select() ifadesini alabilir.
    # Burada DDL'i doğrudan kullanacağız.
    __view__ = view_ddl(
        # SQL tanımının başına ve sonuna tırnak işaretlerini ekleyelim
        # SQL tanımını text() fonksiyonu içine alarak daha okunur hale getirebiliriz
        text("""{{ vw.ddl }}"""),
        materialized=False # Eğer materyalleştirilmiş (materialized) bir görünümse burayı True yapın.
                           # Bu bilgi mevcut DDL'den doğrudan çekilemez, manuel ayarlanmalıdır.
    )

    {# Görünümün sütunlarını manuel olarak tanımlamanız gerekecek #}
    {# Bu, ORM sorgularınızın düzgün çalışması için önemlidir. #}
    {# Buradaki `cols` listesi, size bir başlangıç noktası sağlayabilir. #}
    {# Görünümün birincil anahtarını belirlemek kritik, aksi takdirde ORM hata verebilir. #}
    {% if vw.columns %}
    # Görünüm sütunları (Bu kısım otomatik üretildiği için dikkatli olun, PK'yi el ile atamanız gerekebilir)
    {% for col in vw.columns %}
        {# Görünümler için genellikle primary_key'i otomatik belirlemek zordur, #}
        {# bu yüzden yorum satırı olarak bırakıp kullanıcının elle atamasını teşvik edebiliriz. #}
    {{ col.name }} = Column({{ fix_type(col.type) }}) # , primary_key=True # Burası manuel eklenebilir
    {% endfor %}
    {% else %}
    # UYARI: Bu görünüm için sütun bilgileri otomatik alınamadı.
    # Lütfen aşağıdaki gibi sütunları manuel olarak tanımlayın:
    # id = Column(Integer, primary_key=True)
    # name = Column(String)
    # value = Column(Integer)
    {% endif %}

{% endfor %}
{% endif %}

{#                - #}
{# FONKSİYON ve TRIGGER DDL’LERİ (Yorum‐blok yerine deklaratif) #}
{% if functions %}
# ========================================
# Fonksiyon Tanımları (SQLAlchemy Declarative Extensions ile)
from sqlalchemy_declarative_extensions import declared_function, function_ddl

{% for fn in functions %}
@declared_function("{{ fn.name }}")
class {{ fn.name.replace('_',' ').title().replace(' ','') }}:
    __function__ = function_ddl(
        text("""{{ fn.ddl }}""")
    )
{% endfor %}
{% endif %}

{% if triggers %}
# ========================================
# Trigger Tanımları (SQLAlchemy Declarative Extensions ile)
from sqlalchemy_declarative_extensions import declared_trigger, trigger_ddl

{% for trg in triggers %}
@declared_trigger("{{ trg.name }}")
class {{ trg.name.replace('_',' ').title().replace(' ','') }}:
    __tablename__ = "{{ trg.table }}" # Trigger'ın bağlı olduğu tablo
    __trigger__ = trigger_ddl(
        text("""{{ trg.ddl }}""")
    )
{% endfor %}
{% endif %}

